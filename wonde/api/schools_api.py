"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import date
from typing import Optional

from pydantic import Field, StrictBool, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from wonde.api_client import ApiClient
from wonde.api_response import ApiResponse
from wonde.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from wonde.models.get_school200_response import GetSchool200Response
from wonde.models.get_school_acl200_response import GetSchoolAcl200Response
from wonde.models.get_school_meta200_response import GetSchoolMeta200Response
from wonde.models.get_school_permissions200_response import GetSchoolPermissions200Response
from wonde.models.list_schools200_response import ListSchools200Response
from wonde.models.request_school_access200_response import RequestSchoolAccess200Response
from wonde.models.request_school_access_request import RequestSchoolAccessRequest


class SchoolsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_school(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school to retrieve')],
        **kwargs
    ) -> GetSchool200Response:
        """Retrieve a specific school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school to retrieve (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSchool200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the get_school_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.get_school_with_http_info(school_id, **kwargs)

    @validate_arguments
    def get_school_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school to retrieve')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve a specific school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school to retrieve (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSchool200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method get_school' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'GetSchool200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_school_acl(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        with_user_type: Annotated[
            Optional[StrictBool], Field(description='Display the type of user')
        ] = None,
        **kwargs
    ) -> GetSchoolAcl200Response:
        """Retrieve the access control list applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_acl(school_id, with_user_type, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param with_user_type: Display the type of user
        :type with_user_type: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSchoolAcl200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the get_school_acl_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.get_school_acl_with_http_info(school_id, with_user_type, **kwargs)

    @validate_arguments
    def get_school_acl_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        with_user_type: Annotated[
            Optional[StrictBool], Field(description='Display the type of user')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve the access control list applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_acl_with_http_info(school_id, with_user_type, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param with_user_type: Display the type of user
        :type with_user_type: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSchoolAcl200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id', 'with_user_type']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method get_school_acl' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        if _params.get('with_user_type') is not None:
            _query_params.append(('with_user_type', _params['with_user_type']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'GetSchoolAcl200Response',
        }

        return self.api_client.call_api(
            '/meta/schools/{school_id}/acl',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_school_meta(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> GetSchoolMeta200Response:
        """Retrieve meta data for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_meta(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSchoolMeta200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the get_school_meta_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.get_school_meta_with_http_info(school_id, **kwargs)

    @validate_arguments
    def get_school_meta_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve meta data for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_meta_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSchoolMeta200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method get_school_meta' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'GetSchoolMeta200Response',
        }

        return self.api_client.call_api(
            '/meta/schools/{school_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def get_school_permissions(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> GetSchoolPermissions200Response:
        """Retrieve the permissions applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_permissions(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GetSchoolPermissions200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the get_school_permissions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.get_school_permissions_with_http_info(school_id, **kwargs)

    @validate_arguments
    def get_school_permissions_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve the permissions applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_permissions_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GetSchoolPermissions200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method get_school_permissions' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'GetSchoolPermissions200Response',
        }

        return self.api_client.call_api(
            '/meta/schools/{school_id}/permissions',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description='Page offset for offset-paginated results.')
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description='Page cursor for cursor-paginated results.')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools(updated_after, updated_before, per_page, page, cursor, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param page: Page offset for offset-paginated results.
        :type page: int
        :param cursor: Page cursor for cursor-paginated results.
        :type cursor: str
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_with_http_info(
            updated_after,
            updated_before,
            per_page,
            page,
            cursor,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def list_schools_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description='Page offset for offset-paginated results.')
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description='Page cursor for cursor-paginated results.')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_with_http_info(updated_after, updated_before, per_page, page, cursor, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param page: Page offset for offset-paginated results.
        :type page: int
        :param cursor: Page cursor for cursor-paginated results.
        :type cursor: str
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'page',
            'cursor',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method list_schools' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], date):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], date):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('page') is not None:
            _query_params.append(('page', _params['page']))

        if _params.get('cursor') is not None:
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/all',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_approved(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description='Page offset for offset-paginated results.')
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description='Page cursor for cursor-paginated results.')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all approved schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_approved(updated_after, updated_before, per_page, page, cursor, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param page: Page offset for offset-paginated results.
        :type page: int
        :param cursor: Page cursor for cursor-paginated results.
        :type cursor: str
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_approved_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_approved_with_http_info(
            updated_after,
            updated_before,
            per_page,
            page,
            cursor,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def list_schools_approved_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        page: Annotated[
            Optional[StrictInt], Field(description='Page offset for offset-paginated results.')
        ] = None,
        cursor: Annotated[
            Optional[StrictStr], Field(description='Page cursor for cursor-paginated results.')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all approved schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_approved_with_http_info(updated_after, updated_before, per_page, page, cursor, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param page: Page offset for offset-paginated results.
        :type page: int
        :param cursor: Page cursor for cursor-paginated results.
        :type cursor: str
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'page',
            'cursor',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_approved' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], date):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], date):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('page') is not None:
            _query_params.append(('page', _params['page']))

        if _params.get('cursor') is not None:
            _query_params.append(('cursor', _params['cursor']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_audited(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all audited schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_audited(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_audited_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_audited_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def list_schools_audited_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all audited schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_audited_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_audited' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], date):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], date):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/audited',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_declined(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all schools with declined access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_declined(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_declined_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_declined_with_http_info(per_page, **kwargs)

    @validate_arguments
    def list_schools_declined_with_http_info(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with declined access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_declined_with_http_info(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['per_page']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_declined' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/declined',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_offline(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all offline schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_offline(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_offline_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_offline_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def list_schools_offline_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all offline schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_offline_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_offline' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], date):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], date):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/offline',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_pending(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all schools with pending access request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_pending(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_pending_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_pending_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def list_schools_pending_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with pending access request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_pending_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_pending' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], date):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], date):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/pending',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_schools_revoked(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ListSchools200Response:
        """Retrieve all schools with revoked access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_revoked(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchools200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the list_schools_revoked_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.list_schools_revoked_with_http_info(per_page, **kwargs)

    @validate_arguments
    def list_schools_revoked_with_http_info(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with revoked access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_schools_revoked_with_http_info(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchools200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['per_page']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_schools_revoked' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchools200Response',
        }

        return self.api_client.call_api(
            '/schools/revoked',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def request_school_access(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        request_school_access_request: Annotated[
            Optional[RequestSchoolAccessRequest],
            Field(description='Contacts to add for the request'),
        ] = None,
        **kwargs
    ) -> RequestSchoolAccess200Response:
        """Request access to a school  # noqa: E501

        When requesting access to a school it is recommended that you provide details of available  contacts at the school.  This can speed up the approval process considerably but it is not required.  The contact should be provided within an array.  More than one contact can be provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_school_access(school_id, request_school_access_request, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param request_school_access_request: Contacts to add for the request
        :type request_school_access_request: RequestSchoolAccessRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RequestSchoolAccess200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the request_school_access_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.request_school_access_with_http_info(
            school_id, request_school_access_request, **kwargs
        )

    @validate_arguments
    def request_school_access_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        request_school_access_request: Annotated[
            Optional[RequestSchoolAccessRequest],
            Field(description='Contacts to add for the request'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Request access to a school  # noqa: E501

        When requesting access to a school it is recommended that you provide details of available  contacts at the school.  This can speed up the approval process considerably but it is not required.  The contact should be provided within an array.  More than one contact can be provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.request_school_access_with_http_info(school_id, request_school_access_request, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param request_school_access_request: Contacts to add for the request
        :type request_school_access_request: RequestSchoolAccessRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RequestSchoolAccess200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id', 'request_school_access_request']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method request_school_access' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['request_school_access_request'] is not None:
            _body_params = _params['request_school_access_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type', self.api_client.select_header_content_type(['application/json'])
        )
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'RequestSchoolAccess200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/request-access',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def revoke_school_access(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> RequestSchoolAccess200Response:
        """Revoke access to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_school_access(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: RequestSchoolAccess200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = 'Error! Please call the revoke_school_access_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            raise ValueError(message)
        return self.revoke_school_access_with_http_info(school_id, **kwargs)

    @validate_arguments
    def revoke_school_access_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Revoke access to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.revoke_school_access_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(RequestSchoolAccess200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method revoke_school_access' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'RequestSchoolAccess200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/revoke-access',
            'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )
