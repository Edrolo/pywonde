"""
Wonde API

API Docs  # noqa: E501

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import (
    date,
    datetime,
)
from typing import Optional

from pydantic import Field, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from wonde.api_client import ApiClient
from wonde.api_response import ApiResponse
from wonde.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from wonde.models.meta_schools_school_id_get200_response import MetaSchoolsSchoolIdGet200Response
from wonde.models.meta_schools_school_id_permissions_get200_response import (
    MetaSchoolsSchoolIdPermissionsGet200Response,
)
from wonde.models.school import School
from wonde.models.schools_all_get200_response import SchoolsAllGet200Response
from wonde.models.schools_school_id_request_access_post200_response import (
    SchoolsSchoolIdRequestAccessPost200Response,
)
from wonde.models.schools_school_id_request_access_post_request import (
    SchoolsSchoolIdRequestAccessPostRequest,
)


class SchoolsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_school(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school to retrieve')],
        **kwargs
    ) -> School:
        """Retrieve a specific school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school to retrieve (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: School
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the get_school_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.get_school_with_http_info(school_id, **kwargs)

    @validate_arguments
    def get_school_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school to retrieve')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve a specific school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school to retrieve (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(School, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method get_school' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'School',
        }

        return self.api_client.call_api(
            '/schools/{school_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def meta_schools_school_id_get(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> MetaSchoolsSchoolIdGet200Response:
        """Retrieve meta data for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.meta_schools_school_id_get(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MetaSchoolsSchoolIdGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the meta_schools_school_id_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.meta_schools_school_id_get_with_http_info(school_id, **kwargs)

    @validate_arguments
    def meta_schools_school_id_get_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve meta data for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.meta_schools_school_id_get_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MetaSchoolsSchoolIdGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method meta_schools_school_id_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'MetaSchoolsSchoolIdGet200Response',
        }

        return self.api_client.call_api(
            '/meta/schools/{school_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def meta_schools_school_id_permissions_get(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> MetaSchoolsSchoolIdPermissionsGet200Response:
        """Retrieve the permissions applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.meta_schools_school_id_permissions_get(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: MetaSchoolsSchoolIdPermissionsGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the meta_schools_school_id_permissions_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.meta_schools_school_id_permissions_get_with_http_info(school_id, **kwargs)

    @validate_arguments
    def meta_schools_school_id_permissions_get_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Retrieve the permissions applied to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.meta_schools_school_id_permissions_get_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(MetaSchoolsSchoolIdPermissionsGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method meta_schools_school_id_permissions_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'MetaSchoolsSchoolIdPermissionsGet200Response',
        }

        return self.api_client.call_api(
            '/meta/schools/{school_id}/permissions',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_all_get(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_all_get(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_all_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_all_get_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def schools_all_get_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_all_get_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" ' to method schools_all_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/all',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_approved_get(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all approved schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_approved_get(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_approved_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_approved_get_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def schools_approved_get_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all approved schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_approved_get_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_approved_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/approved',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_audited_get(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all audited schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_audited_get(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_audited_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_audited_get_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def schools_audited_get_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all audited schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_audited_get_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_audited_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/audited',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_declined_get(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all schools with declined access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_declined_get(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_declined_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_declined_get_with_http_info(per_page, **kwargs)

    @validate_arguments
    def schools_declined_get_with_http_info(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with declined access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_declined_get_with_http_info(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['per_page']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_declined_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/declined',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_offline_get(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all offline schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_offline_get(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_offline_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_offline_get_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def schools_offline_get_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all offline schools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_offline_get_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_offline_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/offline',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_pending_get(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all schools with pending access request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_pending_get(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_pending_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_pending_get_with_http_info(
            updated_after,
            updated_before,
            per_page,
            postcode,
            la_code,
            establishment_number,
            urn,
            **kwargs
        )

    @validate_arguments
    def schools_pending_get_with_http_info(
        self,
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        postcode: Annotated[
            Optional[StrictStr], Field(description='Return results matching postcode search string')
        ] = None,
        la_code: Annotated[
            Optional[StrictStr], Field(description='Return results with provided la_code')
        ] = None,
        establishment_number: Annotated[
            Optional[StrictStr],
            Field(description='Return results with provided establishment_number'),
        ] = None,
        urn: Annotated[
            Optional[StrictInt],
            Field(description='Return results with provided unique reference number'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with pending access request  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_pending_get_with_http_info(updated_after, updated_before, per_page, postcode, la_code, establishment_number, urn, async_req=True)
        >>> result = thread.get()

        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param postcode: Return results matching postcode search string
        :type postcode: str
        :param la_code: Return results with provided la_code
        :type la_code: str
        :param establishment_number: Return results with provided establishment_number
        :type establishment_number: str
        :param urn: Return results with provided unique reference number
        :type urn: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'updated_after',
            'updated_before',
            'per_page',
            'postcode',
            'la_code',
            'establishment_number',
            'urn',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_pending_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('postcode') is not None:
            _query_params.append(('postcode', _params['postcode']))

        if _params.get('la_code') is not None:
            _query_params.append(('la_code', _params['la_code']))

        if _params.get('establishment_number') is not None:
            _query_params.append(('establishment_number', _params['establishment_number']))

        if _params.get('urn') is not None:
            _query_params.append(('urn', _params['urn']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/pending',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_revoked_get(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> SchoolsAllGet200Response:
        """Retrieve all schools with revoked access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_revoked_get(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsAllGet200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_revoked_get_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_revoked_get_with_http_info(per_page, **kwargs)

    @validate_arguments
    def schools_revoked_get_with_http_info(
        self,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Retrieve all schools with revoked access  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_revoked_get_with_http_info(per_page, async_req=True)
        >>> result = thread.get()

        :param per_page: Amount of rows to return
        :type per_page: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsAllGet200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['per_page']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_revoked_get' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsAllGet200Response',
        }

        return self.api_client.call_api(
            '/schools/revoked',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_school_id_request_access_post(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        schools_school_id_request_access_post_request: Annotated[
            Optional[SchoolsSchoolIdRequestAccessPostRequest],
            Field(description='Contacts to add for the request'),
        ] = None,
        **kwargs
    ) -> SchoolsSchoolIdRequestAccessPost200Response:
        """Request access to a school  # noqa: E501

        When requesting access to a school it is recommended that you provide details of available  contacts at the school.  This can speed up the approval process considerably but it is not required.  The contact should be provided within an array.  More than one contact can be provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_school_id_request_access_post(school_id, schools_school_id_request_access_post_request, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param schools_school_id_request_access_post_request: Contacts to add for the request
        :type schools_school_id_request_access_post_request: SchoolsSchoolIdRequestAccessPostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsSchoolIdRequestAccessPost200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_school_id_request_access_post_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_school_id_request_access_post_with_http_info(
            school_id, schools_school_id_request_access_post_request, **kwargs
        )

    @validate_arguments
    def schools_school_id_request_access_post_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        schools_school_id_request_access_post_request: Annotated[
            Optional[SchoolsSchoolIdRequestAccessPostRequest],
            Field(description='Contacts to add for the request'),
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Request access to a school  # noqa: E501

        When requesting access to a school it is recommended that you provide details of available  contacts at the school.  This can speed up the approval process considerably but it is not required.  The contact should be provided within an array.  More than one contact can be provided.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_school_id_request_access_post_with_http_info(school_id, schools_school_id_request_access_post_request, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param schools_school_id_request_access_post_request: Contacts to add for the request
        :type schools_school_id_request_access_post_request: SchoolsSchoolIdRequestAccessPostRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsSchoolIdRequestAccessPost200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id', 'schools_school_id_request_access_post_request']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_school_id_request_access_post' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['schools_school_id_request_access_post_request'] is not None:
            _body_params = _params['schools_school_id_request_access_post_request']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            '_content_type', self.api_client.select_header_content_type(['application/json'])
        )
        if _content_types_list:
            _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsSchoolIdRequestAccessPost200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/request-access',
            'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def schools_school_id_revoke_access_delete(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> SchoolsSchoolIdRequestAccessPost200Response:
        """Revoke access to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_school_id_revoke_access_delete(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: SchoolsSchoolIdRequestAccessPost200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the schools_school_id_revoke_access_delete_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.schools_school_id_revoke_access_delete_with_http_info(school_id, **kwargs)

    @validate_arguments
    def schools_school_id_revoke_access_delete_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        **kwargs
    ) -> ApiResponse:
        """Revoke access to a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.schools_school_id_revoke_access_delete_with_http_info(school_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(SchoolsSchoolIdRequestAccessPost200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method schools_school_id_revoke_access_delete' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'SchoolsSchoolIdRequestAccessPost200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/revoke-access',
            'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )
