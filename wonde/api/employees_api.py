"""
Wonde API

API Docs  # noqa: E501

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import (
    date,
    datetime,
)
from typing import Optional

from pydantic import Field, StrictBool, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from wonde.api_client import ApiClient
from wonde.api_response import ApiResponse
from wonde.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from wonde.models.employee import Employee
from wonde.models.list_school_employees200_response import ListSchoolEmployees200Response


class EmployeesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_school_employee(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        employee_id: Annotated[StrictStr, Field(..., description='The ID of the employee')],
        **kwargs
    ) -> Employee:
        """Get specific employee for a school  # noqa: E501

        You need the employees read permission to view this object. To retrieve the secondary and tertiary ids please add extra_ids=true to the url.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_employee(school_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param employee_id: The ID of the employee (required)
        :type employee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Employee
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the get_school_employee_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.get_school_employee_with_http_info(school_id, employee_id, **kwargs)

    @validate_arguments
    def get_school_employee_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        employee_id: Annotated[StrictStr, Field(..., description='The ID of the employee')],
        **kwargs
    ) -> ApiResponse:
        """Get specific employee for a school  # noqa: E501

        You need the employees read permission to view this object. To retrieve the secondary and tertiary ids please add extra_ids=true to the url.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_school_employee_with_http_info(school_id, employee_id, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param employee_id: The ID of the employee (required)
        :type employee_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Employee, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ['school_id', 'employee_id']
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method get_school_employee' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        if _params['employee_id']:
            _path_params['employee_id'] = _params['employee_id']

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'Employee',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/employees/{employee_id}',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )

    @validate_arguments
    def list_school_employees(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        include: Annotated[
            Optional[StrictStr], Field(description='Comma separated list of objects to include')
        ] = None,
        employment_start_before: Annotated[
            Optional[date], Field(description='Get employees who have started before a date')
        ] = None,
        employment_start_after: Annotated[
            Optional[date], Field(description='Get employees who have started after a date')
        ] = None,
        has_role: Annotated[
            Optional[StrictBool], Field(description='Only return employees that have a role')
        ] = None,
        has_contract: Annotated[
            Optional[StrictBool], Field(description='Only return employees that have a contract')
        ] = None,
        has_class: Annotated[
            Optional[StrictBool],
            Field(description='Only return employees that have one or more classes'),
        ] = None,
        has_group: Annotated[
            Optional[StrictBool],
            Field(description='Only return employees that have one or more groups'),
        ] = None,
        user_defined_field: Annotated[
            Optional[StrictStr], Field(description='Filter employees by user defined field key')
        ] = None,
        only_user_defined_fields: Annotated[
            Optional[StrictStr],
            Field(description='Filter user defined fields by comma separated list'),
        ] = None,
        only_mis_ids: Annotated[
            Optional[StrictStr], Field(description='Filter MIS ids by comma separated list')
        ] = None,
        **kwargs
    ) -> ListSchoolEmployees200Response:
        """Get all employees for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_school_employees(school_id, updated_after, updated_before, per_page, include, employment_start_before, employment_start_after, has_role, has_contract, has_class, has_group, user_defined_field, only_user_defined_fields, only_mis_ids, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param include: Comma separated list of objects to include
        :type include: str
        :param employment_start_before: Get employees who have started before a date
        :type employment_start_before: date
        :param employment_start_after: Get employees who have started after a date
        :type employment_start_after: date
        :param has_role: Only return employees that have a role
        :type has_role: bool
        :param has_contract: Only return employees that have a contract
        :type has_contract: bool
        :param has_class: Only return employees that have one or more classes
        :type has_class: bool
        :param has_group: Only return employees that have one or more groups
        :type has_group: bool
        :param user_defined_field: Filter employees by user defined field key
        :type user_defined_field: str
        :param only_user_defined_fields: Filter user defined fields by comma separated list
        :type only_user_defined_fields: str
        :param only_mis_ids: Filter MIS ids by comma separated list
        :type only_mis_ids: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListSchoolEmployees200Response
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError(
                'Error! Please call the list_school_employees_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data'
            )
        return self.list_school_employees_with_http_info(
            school_id,
            updated_after,
            updated_before,
            per_page,
            include,
            employment_start_before,
            employment_start_after,
            has_role,
            has_contract,
            has_class,
            has_group,
            user_defined_field,
            only_user_defined_fields,
            only_mis_ids,
            **kwargs
        )

    @validate_arguments
    def list_school_employees_with_http_info(
        self,
        school_id: Annotated[StrictStr, Field(..., description='The ID of the school')],
        updated_after: Annotated[
            Optional[date], Field(description='Return rows modified after date')
        ] = None,
        updated_before: Annotated[
            Optional[date], Field(description='Return rows modified before date')
        ] = None,
        per_page: Annotated[
            Optional[StrictInt], Field(description='Amount of rows to return')
        ] = None,
        include: Annotated[
            Optional[StrictStr], Field(description='Comma separated list of objects to include')
        ] = None,
        employment_start_before: Annotated[
            Optional[date], Field(description='Get employees who have started before a date')
        ] = None,
        employment_start_after: Annotated[
            Optional[date], Field(description='Get employees who have started after a date')
        ] = None,
        has_role: Annotated[
            Optional[StrictBool], Field(description='Only return employees that have a role')
        ] = None,
        has_contract: Annotated[
            Optional[StrictBool], Field(description='Only return employees that have a contract')
        ] = None,
        has_class: Annotated[
            Optional[StrictBool],
            Field(description='Only return employees that have one or more classes'),
        ] = None,
        has_group: Annotated[
            Optional[StrictBool],
            Field(description='Only return employees that have one or more groups'),
        ] = None,
        user_defined_field: Annotated[
            Optional[StrictStr], Field(description='Filter employees by user defined field key')
        ] = None,
        only_user_defined_fields: Annotated[
            Optional[StrictStr],
            Field(description='Filter user defined fields by comma separated list'),
        ] = None,
        only_mis_ids: Annotated[
            Optional[StrictStr], Field(description='Filter MIS ids by comma separated list')
        ] = None,
        **kwargs
    ) -> ApiResponse:
        """Get all employees for a school  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_school_employees_with_http_info(school_id, updated_after, updated_before, per_page, include, employment_start_before, employment_start_after, has_role, has_contract, has_class, has_group, user_defined_field, only_user_defined_fields, only_mis_ids, async_req=True)
        >>> result = thread.get()

        :param school_id: The ID of the school (required)
        :type school_id: str
        :param updated_after: Return rows modified after date
        :type updated_after: date
        :param updated_before: Return rows modified before date
        :type updated_before: date
        :param per_page: Amount of rows to return
        :type per_page: int
        :param include: Comma separated list of objects to include
        :type include: str
        :param employment_start_before: Get employees who have started before a date
        :type employment_start_before: date
        :param employment_start_after: Get employees who have started after a date
        :type employment_start_after: date
        :param has_role: Only return employees that have a role
        :type has_role: bool
        :param has_contract: Only return employees that have a contract
        :type has_contract: bool
        :param has_class: Only return employees that have one or more classes
        :type has_class: bool
        :param has_group: Only return employees that have one or more groups
        :type has_group: bool
        :param user_defined_field: Filter employees by user defined field key
        :type user_defined_field: str
        :param only_user_defined_fields: Filter user defined fields by comma separated list
        :type only_user_defined_fields: str
        :param only_mis_ids: Filter MIS ids by comma separated list
        :type only_mis_ids: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListSchoolEmployees200Response, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'school_id',
            'updated_after',
            'updated_before',
            'per_page',
            'include',
            'employment_start_before',
            'employment_start_after',
            'has_role',
            'has_contract',
            'has_class',
            'has_group',
            'user_defined_field',
            'only_user_defined_fields',
            'only_mis_ids',
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers',
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    ' to method list_school_employees' % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['school_id']:
            _path_params['school_id'] = _params['school_id']

        # process the query parameters
        _query_params = []
        if _params.get('updated_after') is not None:
            if isinstance(_params['updated_after'], datetime):
                _query_params.append(
                    (
                        'updated_after',
                        _params['updated_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_after', _params['updated_after']))

        if _params.get('updated_before') is not None:
            if isinstance(_params['updated_before'], datetime):
                _query_params.append(
                    (
                        'updated_before',
                        _params['updated_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('updated_before', _params['updated_before']))

        if _params.get('per_page') is not None:
            _query_params.append(('per_page', _params['per_page']))

        if _params.get('include') is not None:
            _query_params.append(('include', _params['include']))

        if _params.get('employment_start_before') is not None:
            if isinstance(_params['employment_start_before'], datetime):
                _query_params.append(
                    (
                        'employment_start_before',
                        _params['employment_start_before'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ('employment_start_before', _params['employment_start_before'])
                )

        if _params.get('employment_start_after') is not None:
            if isinstance(_params['employment_start_after'], datetime):
                _query_params.append(
                    (
                        'employment_start_after',
                        _params['employment_start_after'].strftime(
                            self.api_client.configuration.date_format
                        ),
                    )
                )
            else:
                _query_params.append(('employment_start_after', _params['employment_start_after']))

        if _params.get('has_role') is not None:
            _query_params.append(('has_role', _params['has_role']))

        if _params.get('has_contract') is not None:
            _query_params.append(('has_contract', _params['has_contract']))

        if _params.get('has_class') is not None:
            _query_params.append(('has_class', _params['has_class']))

        if _params.get('has_group') is not None:
            _query_params.append(('has_group', _params['has_group']))

        if _params.get('user_defined_field') is not None:
            _query_params.append(('user_defined_field', _params['user_defined_field']))

        if _params.get('only_user_defined_fields') is not None:
            _query_params.append(('only_user_defined_fields', _params['only_user_defined_fields']))

        if _params.get('only_mis_ids') is not None:
            _query_params.append(('only_mis_ids', _params['only_mis_ids']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(['application/json'])

        # authentication setting
        _auth_settings = ['BasicAuth', 'BearerAuth']

        _response_types_map = {
            '200': 'ListSchoolEmployees200Response',
        }

        return self.api_client.call_api(
            '/schools/{school_id}/employees',
            'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'),
        )
