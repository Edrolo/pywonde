"""
Wonde API

API Docs  # noqa: E501

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, StrictStr

from wonde.models.date_time_object import DateTimeObject


class Deletion(BaseModel):
    """
    Deletion
    """

    type: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    mis_id: Optional[StrictStr] = None
    deleted_at: Optional[DateTimeObject] = None
    restored_at: Optional[DateTimeObject] = None
    __properties = ['type', 'id', 'mis_id', 'deleted_at', 'restored_at']

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Deletion:
        """Create an instance of Deletion from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of deleted_at
        if self.deleted_at:
            _dict['deleted_at'] = self.deleted_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restored_at
        if self.restored_at:
            _dict['restored_at'] = self.restored_at.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Deletion:
        """Create an instance of Deletion from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Deletion.parse_obj(obj)

        _obj = Deletion.parse_obj(
            {
                'type': obj.get('type'),
                'id': obj.get('id'),
                'mis_id': obj.get('mis_id'),
                'deleted_at': DateTimeObject.from_dict(obj.get('deleted_at'))
                if obj.get('deleted_at') is not None
                else None,
                'restored_at': DateTimeObject.from_dict(obj.get('restored_at'))
                if obj.get('restored_at') is not None
                else None,
            }
        )
        return _obj
