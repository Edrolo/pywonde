"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, StrictStr

from wonde.models.school_address_address_country import SchoolAddressAddressCountry


class SchoolAddress(BaseModel):
    """
    SchoolAddress
    """

    address_line_1: Optional[StrictStr] = None
    address_line_2: Optional[StrictStr] = None
    address_town: Optional[StrictStr] = None
    address_postcode: Optional[StrictStr] = None
    address_country: Optional[SchoolAddressAddressCountry] = None
    __properties = [
        'address_line_1',
        'address_line_2',
        'address_town',
        'address_postcode',
        'address_country',
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SchoolAddress:
        """Create an instance of SchoolAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of address_country
        if self.address_country:
            _dict['address_country'] = self.address_country.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SchoolAddress:
        """Create an instance of SchoolAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SchoolAddress.parse_obj(obj)

        _obj = SchoolAddress.parse_obj(
            {
                'address_line_1': obj.get('address_line_1'),
                'address_line_2': obj.get('address_line_2'),
                'address_town': obj.get('address_town'),
                'address_postcode': obj.get('address_postcode'),
                'address_country': SchoolAddressAddressCountry.from_dict(obj.get('address_country'))
                if obj.get('address_country') is not None
                else None,
            }
        )
        return _obj
