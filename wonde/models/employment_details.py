"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, StrictBool, StrictStr

from wonde.models.date_time_object import DateTimeObject


class EmploymentDetails(BaseModel):
    """
    EmploymentDetails
    """

    current: Optional[StrictBool] = None
    teaching_staff: Optional[StrictBool] = None
    employment_start_date: Optional[DateTimeObject] = None
    employment_end_date: Optional[DateTimeObject] = None
    role_text: Optional[StrictStr] = None
    __properties = [
        'current',
        'teaching_staff',
        'employment_start_date',
        'employment_end_date',
        'role_text',
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EmploymentDetails:
        """Create an instance of EmploymentDetails from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of employment_start_date
        if self.employment_start_date:
            _dict['employment_start_date'] = self.employment_start_date.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employment_end_date
        if self.employment_end_date:
            _dict['employment_end_date'] = self.employment_end_date.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EmploymentDetails:
        """Create an instance of EmploymentDetails from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EmploymentDetails.parse_obj(obj)

        _obj = EmploymentDetails.parse_obj(
            {
                'current': obj.get('current'),
                'teaching_staff': obj.get('teaching_staff'),
                'employment_start_date': DateTimeObject.from_dict(obj.get('employment_start_date'))
                if obj.get('employment_start_date') is not None
                else None,
                'employment_end_date': DateTimeObject.from_dict(obj.get('employment_end_date'))
                if obj.get('employment_end_date') is not None
                else None,
                'role_text': obj.get('role_text'),
            }
        )
        return _obj
