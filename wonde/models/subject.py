"""
Wonde API

API Docs  # noqa: E501

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictStr

from wonde.models.date_time_object import DateTimeObject


class Subject(BaseModel):
    """
    < https://docs.wonde.com/docs/api/sync#subject-object Related objects Name                    Relationship ----------------------------------------- classes                    many classes.lessons            many > many classes.lessons.period    many > many > one classes.lessons.room    many > many > one
    """

    id: Optional[StrictStr] = Field(None, description='The ID of the object.')
    mis_id: Optional[StrictStr] = Field(None, description='The subject ID in the MIS.')
    code: Optional[StrictStr] = Field(None, description='Short identifier for the subject.')
    name: Optional[StrictStr] = Field(None, description='The subject`s name.')
    active: Optional[StrictBool] = Field(None, description='Is the subject active.')
    created_at: Optional[DateTimeObject] = None
    updated_at: Optional[DateTimeObject] = None
    __properties = ['id', 'mis_id', 'code', 'name', 'active', 'created_at', 'updated_at']

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Subject:
        """Create an instance of Subject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # set to None if active (nullable) is None
        # and __fields_set__ contains the field
        if self.active is None and 'active' in self.__fields_set__:
            _dict['active'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Subject:
        """Create an instance of Subject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Subject.parse_obj(obj)

        _obj = Subject.parse_obj(
            {
                'id': obj.get('id'),
                'mis_id': obj.get('mis_id'),
                'code': obj.get('code'),
                'name': obj.get('name'),
                'active': obj.get('active'),
                'created_at': DateTimeObject.from_dict(obj.get('created_at'))
                if obj.get('created_at') is not None
                else None,
                'updated_at': DateTimeObject.from_dict(obj.get('updated_at'))
                if obj.get('updated_at') is not None
                else None,
            }
        )
        return _obj
