"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class DateTimeObject(BaseModel):
    """
    DateTimeObject
    """

    var_date: Optional[datetime] = Field(
        None, alias='date', description='The date and time value, apparently with no timezone'
    )
    timezone_type: Optional[StrictInt] = Field(
        None,
        description='The type of the timezone, represented by an integer. Not sure of mapping.',
    )
    timezone: Optional[StrictStr] = Field(
        None, description='The timezone in which the date and time is represented.'
    )
    __properties = ['date', 'timezone_type', 'timezone']

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DateTimeObject:
        """Create an instance of DateTimeObject from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DateTimeObject:
        """Create an instance of DateTimeObject from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DateTimeObject.parse_obj(obj)

        _obj = DateTimeObject.parse_obj(
            {
                'var_date': obj.get('date'),
                'timezone_type': obj.get('timezone_type'),
                'timezone': obj.get('timezone'),
            }
        )
        return _obj
