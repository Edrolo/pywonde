# coding: utf-8

"""
    Wonde API

    API Docs

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from wonde.models.date_time_object import DateTimeObject
from wonde.models.school_class_employees import SchoolClassEmployees
from wonde.models.school_class_lessons import SchoolClassLessons
from wonde.models.school_class_students import SchoolClassStudents
from wonde.models.school_class_subject import SchoolClassSubject

class SchoolClass(BaseModel):
    """
    https://docs.wonde.com/docs/api/sync#get-classes Related objects Name                            Relationship -------------------------------------------- subject                         one students                        many students.contact_details        many > one students.education_details      many > one students.extended_details       many > one students.house                  many > one students.registration           many > one students.year                   many > one students.boarding               many > one students.campus                 many > one employees                       many employees.contact_details       many > one employees.employment_details    many > one employees.extended_details      many > one lessons                         many lessons.room                    many > one lessons.period                  many > one   # noqa: E501
    """
    id: Optional[StrictStr] = Field(None, description="The ID of the object.")
    mis_id: Optional[StrictStr] = Field(None, description="The ID in the MIS.")
    name: Optional[StrictStr] = Field(None, description="Class name.")
    code: Optional[StrictStr] = Field(None, description="Class code.")
    description: Optional[StrictStr] = Field(None, description="Class description.")
    subject: Optional[SchoolClassSubject] = None
    alternative: Optional[StrictBool] = Field(None, description="The class is an alternative to another class.")
    restored_at: Optional[DateTimeObject] = None
    created_at: Optional[DateTimeObject] = None
    updated_at: Optional[DateTimeObject] = None
    students: Optional[SchoolClassStudents] = None
    employees: Optional[SchoolClassEmployees] = None
    lessons: Optional[SchoolClassLessons] = None
    __properties = ["id", "mis_id", "name", "code", "description", "subject", "alternative", "restored_at", "created_at", "updated_at", "students", "employees", "lessons"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SchoolClass:
        """Create an instance of SchoolClass from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of subject
        if self.subject:
            _dict['subject'] = self.subject.to_dict()
        # override the default output from pydantic by calling `to_dict()` of restored_at
        if self.restored_at:
            _dict['restored_at'] = self.restored_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of students
        if self.students:
            _dict['students'] = self.students.to_dict()
        # override the default output from pydantic by calling `to_dict()` of employees
        if self.employees:
            _dict['employees'] = self.employees.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lessons
        if self.lessons:
            _dict['lessons'] = self.lessons.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SchoolClass:
        """Create an instance of SchoolClass from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SchoolClass.parse_obj(obj)

        _obj = SchoolClass.parse_obj({
            "id": obj.get("id"),
            "mis_id": obj.get("mis_id"),
            "name": obj.get("name"),
            "code": obj.get("code"),
            "description": obj.get("description"),
            "subject": SchoolClassSubject.from_dict(obj.get("subject")) if obj.get("subject") is not None else None,
            "alternative": obj.get("alternative"),
            "restored_at": DateTimeObject.from_dict(obj.get("restored_at")) if obj.get("restored_at") is not None else None,
            "created_at": DateTimeObject.from_dict(obj.get("created_at")) if obj.get("created_at") is not None else None,
            "updated_at": DateTimeObject.from_dict(obj.get("updated_at")) if obj.get("updated_at") is not None else None,
            "students": SchoolClassStudents.from_dict(obj.get("students")) if obj.get("students") is not None else None,
            "employees": SchoolClassEmployees.from_dict(obj.get("employees")) if obj.get("employees") is not None else None,
            "lessons": SchoolClassLessons.from_dict(obj.get("lessons")) if obj.get("lessons") is not None else None
        })
        return _obj


