"""
Wonde API

API Docs  # noqa: E501

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401

from pydantic import BaseModel, StrictBool, StrictStr

from wonde.models.date_time_object import DateTimeObject


class Permission(BaseModel):
    """
    Permission
    """

    identity: StrictStr | None = None
    name: StrictStr | None = None
    description: StrictStr | None = None
    parent: StrictStr | None = None
    group: StrictStr | None = None
    active_from: DateTimeObject | None = None
    optional: StrictBool | None = None
    approved: StrictBool | None = None
    audited: StrictBool | None = None
    __properties = [
        'identity',
        'name',
        'description',
        'parent',
        'group',
        'active_from',
        'optional',
        'approved',
        'audited',
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Permission:
        """Create an instance of Permission from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of active_from
        if self.active_from:
            _dict['active_from'] = self.active_from.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Permission:
        """Create an instance of Permission from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Permission.parse_obj(obj)

        _obj = Permission.parse_obj(
            {
                'identity': obj.get('identity'),
                'name': obj.get('name'),
                'description': obj.get('description'),
                'parent': obj.get('parent'),
                'group': obj.get('group'),
                'active_from': DateTimeObject.from_dict(obj.get('active_from'))
                if obj.get('active_from') is not None
                else None,
                'optional': obj.get('optional'),
                'approved': obj.get('approved'),
                'audited': obj.get('audited'),
            }
        )
        return _obj
