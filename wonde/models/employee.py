"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Optional

from pydantic import BaseModel, Field, StrictStr

from wonde.models.date_time_object import DateTimeObject
from wonde.models.employee_contact_details import EmployeeContactDetails


class Employee(BaseModel):
    """
    Employee
    """

    id: Optional[StrictStr] = Field(None, description='The ID of the object.')
    upi: Optional[StrictStr] = Field(
        None,
        description='Unique Person Identifier - If a person is a contact and an employee they will have the same UPI but different ids.',
    )
    mis_id: Optional[StrictStr] = Field(
        None, description='The ID in the Management Information System (MIS).'
    )
    title: Optional[StrictStr] = Field(None, description="Employee's title.")
    initials: Optional[StrictStr] = Field(None, description="Employee's initials.")
    surname: Optional[StrictStr] = Field(None, description="Employee's surname.")
    forename: Optional[StrictStr] = Field(None, description="Employee's forename.")
    middle_names: Optional[StrictStr] = Field(None, description="Employee's middle names.")
    legal_surname: Optional[StrictStr] = Field(None, description="Employee's legal surname.")
    legal_forename: Optional[StrictStr] = Field(None, description="Employee's legal forename.")
    gender: Optional[StrictStr] = Field(None, description="Employee's gender. (male|female)")
    date_of_birth: Optional[date] = Field(None, description="Employee's date of birth.")
    restored_at: Optional[DateTimeObject] = None
    created_at: Optional[DateTimeObject] = None
    updated_at: Optional[DateTimeObject] = None
    contact_details: Optional[EmployeeContactDetails] = None
    __properties = [
        'id',
        'upi',
        'mis_id',
        'title',
        'initials',
        'surname',
        'forename',
        'middle_names',
        'legal_surname',
        'legal_forename',
        'gender',
        'date_of_birth',
        'restored_at',
        'created_at',
        'updated_at',
        'contact_details',
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Employee:
        """Create an instance of Employee from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of restored_at
        if self.restored_at:
            _dict['restored_at'] = self.restored_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of created_at
        if self.created_at:
            _dict['created_at'] = self.created_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updated_at
        if self.updated_at:
            _dict['updated_at'] = self.updated_at.to_dict()
        # override the default output from pydantic by calling `to_dict()` of contact_details
        if self.contact_details:
            _dict['contact_details'] = self.contact_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Employee:
        """Create an instance of Employee from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Employee.parse_obj(obj)

        _obj = Employee.parse_obj(
            {
                'id': obj.get('id'),
                'upi': obj.get('upi'),
                'mis_id': obj.get('mis_id'),
                'title': obj.get('title'),
                'initials': obj.get('initials'),
                'surname': obj.get('surname'),
                'forename': obj.get('forename'),
                'middle_names': obj.get('middle_names'),
                'legal_surname': obj.get('legal_surname'),
                'legal_forename': obj.get('legal_forename'),
                'gender': obj.get('gender'),
                'date_of_birth': obj.get('date_of_birth'),
                'restored_at': DateTimeObject.from_dict(obj.get('restored_at'))
                if obj.get('restored_at') is not None
                else None,
                'created_at': DateTimeObject.from_dict(obj.get('created_at'))
                if obj.get('created_at') is not None
                else None,
                'updated_at': DateTimeObject.from_dict(obj.get('updated_at'))
                if obj.get('updated_at') is not None
                else None,
                'contact_details': EmployeeContactDetails.from_dict(obj.get('contact_details'))
                if obj.get('contact_details') is not None
                else None,
            }
        )
        return _obj
