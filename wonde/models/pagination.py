"""
Wonde API

API Docs

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class Pagination(BaseModel):
    """
    https://docs.wonde.com/docs/api/sync#pagination The pagination object is returned as part of the response body when pagination is enabled.  By default, 50 objects are returned per page. If the response contains 50 objects or fewer,  no pagination object will be returned. If the response contains more than 50 objects, the  first 50 will be returned along with the pagination object. You can request a different pagination limit or force pagination by appending ?per_page= to  the request with the number of items you would like per page. For instance, to show only two  results per page, you could add ?per_page=2 to the end of your query.  The maximum number of results per page is set per-endpoint.   # noqa: E501
    """

    next: Optional[StrictStr] = Field(None, description='The next page in the paginated response.')
    previous: Optional[StrictStr] = Field(
        None, description='The previous page in the paginated response.'
    )
    more: Optional[StrictBool] = Field(
        None, description='Is there another page after the current page.'
    )
    per_page: Optional[StrictInt] = Field(
        None, description='How many rows are currently being returned per page/response.'
    )
    current_page: Optional[StrictInt] = Field(
        None, description='The current paginated page number.'
    )
    __properties = ['next', 'previous', 'more', 'per_page', 'current_page']

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Pagination:
        """Create an instance of Pagination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Pagination:
        """Create an instance of Pagination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Pagination.parse_obj(obj)

        _obj = Pagination.parse_obj(
            {
                'next': obj.get('next'),
                'previous': obj.get('previous'),
                'more': obj.get('more'),
                'per_page': obj.get('per_page'),
                'current_page': obj.get('current_page'),
            }
        )
        return _obj
